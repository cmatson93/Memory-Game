{"version":3,"sources":["components/Header/Header.js","components/Boxes/Boxes.js","components/Grid/Grid.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Boxes","props","console","log","boxes","map","box","key","num","id","onClick","style","background","concat","url","Grid","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","clicked","score","_this2","shuffledBoxes","setState","gameOver","sort","Math","random","alert","_this3","components_Boxes_Boxes","shuffleBoxes","Component","App","components_Header_Header","components_Grid_Grid","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f71b7c7c.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"header\">\r\n            <div className=\"title\">Memory Game</div>\r\n            <div className=\"text\">Click on an image. Once you click on an image don't click it again.</div>\r\n            <div className=\"text\">Each click is worth a divoint. Highest score wins!</div>\r\n        </div>  \r\n    )\r\n};\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./Boxes.css\";\r\n\r\nconst Boxes = (props) => {\r\n    console.log(props.boxes)\r\n    const boxes = props.boxes.map(box =>\r\n        \r\n        <div\r\n            className=\"box\" \r\n            key={box.num} \r\n            id={box.num} \r\n            onClick={(id) => props.onClick(box.num)}\r\n            style={{ background: `url(\"${box.url}\") top center / 200px 200px` }}\r\n            // style={{backroundImage: 'url('+ box.url +')'}}\r\n        >\r\n            {box.num}\r\n        </div>)\r\n    return boxes;\r\n}\r\n\r\nexport default Boxes;","import React, { Component } from \"react\";\r\nimport \"./Grid.css\";\r\nimport Boxes from \"../Boxes\";\r\n\r\nclass Grid extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            boxes : [\r\n                {num: 1, clicked: false, url: '/Images/Chansey.png'},\r\n                {num: 2, clicked: false, url: '/Images/Charmander.png'},\r\n                {num: 3, clicked: false, url: '/Images/Eve.png'},\r\n                {num: 4, clicked: false, url: '/Images/Growlithe.png'},\r\n                {num: 5, clicked: false, url: '/Images/Jynx.png'},\r\n                {num: 6, clicked: false, url: '/Images/Mankey.png'},\r\n                {num: 7, clicked: false, url: '/Images/Meowith.png'},\r\n                {num: 8, clicked: false, url: '/Images/Pickachu.png'},\r\n                {num: 9, clicked: false, url: '/Images/Ponyta.png'},\r\n                {num: 10, clicked: false, url: '/Images/Psyduck.png'},\r\n                {num: 11, clicked: false, url: '/Images/Quilava.png'},\r\n                {num: 12, clicked: false, url: '/Images/Squirtle.png'},\r\n            ],\r\n            score: 0\r\n        }\r\n    };\r\n\r\n    shuffleBoxes(id){\r\n        console.log(`Box number: ${id} clicked.`)\r\n        let shuffledBoxes = this.state.boxes.map(box => {\r\n            if (box.num === id) {\r\n                if (box.clicked === false) {\r\n                    box.clicked = true;\r\n                    this.setState({score : this.state.score + 1});\r\n                } else {\r\n                    this.gameOver();\r\n                }\r\n            }\r\n            return box;\r\n        }).sort(function() { return 0.5 - Math.random() });\r\n        this.setState({boxes: shuffledBoxes})\r\n        console.log(this.state.boxes)\r\n    }\r\n\r\n    gameOver(){\r\n        alert(\"YOU LOOSE\");\r\n        const boxes = [\r\n            {num: 1, clicked: false},\r\n            {num: 2, clicked: false},\r\n            {num: 3, clicked: false},\r\n            {num: 4, clicked: false},\r\n            {num: 5, clicked: false},\r\n            {num: 6, clicked: false},\r\n            {num: 7, clicked: false},\r\n            {num: 8, clicked: false},\r\n            {num: 9, clicked: false},\r\n            {num: 10, clicked: false},\r\n            {num: 11, clicked: false},\r\n            {num: 12, clicked: false},\r\n        ]\r\n        this.setState({boxes: boxes, score: 0})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                {/* <p>{this.state.score}</p> */}\r\n                <div className=\"grid\">\r\n                    <Boxes boxes={this.state.boxes} onClick={(id) => this.shuffleBoxes(id)}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Grid;","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Grid from './components/Grid';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Grid />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}